nimTitle	nodes	fidget2/nodes.html	module src/fidget2/nodes		0
nim	Node	fidget2/nodes.html#Node	type Node		10
nim	internal	fidget2/nodes.html#internal.t,Node	template internal(node: Node): INode		12
nim	`$`	fidget2/nodes.html#$,Node	proc `$`(node: Node): string		15
nim	`==`	fidget2/nodes.html#==,Node,Node	proc `==`(a, b: Node): bool		18
nim	`!=`	fidget2/nodes.html#!=,Node,Node	proc `!=`(a, b: Node): bool		21
nim	`==`	fidget2/nodes.html#==,Node,pointer	proc `==`(a: Node; p: pointer): bool		24
nim	`!=`	fidget2/nodes.html#!=,Node,pointer	proc `!=`(a: Node; p: pointer): bool		27
nim	isNil	fidget2/nodes.html#isNil,Node	proc isNil(node: Node): bool		30
nim	isNotNil	fidget2/nodes.html#isNotNil,Node	proc isNotNil(node: Node): bool		33
nim	kind	fidget2/nodes.html#kind,Node	proc kind(node: Node): NodeKind		36
nim	name	fidget2/nodes.html#name,Node	proc name(node: Node): string		39
nim	id	fidget2/nodes.html#id,Node	proc id(node: Node): string		42
nim	componentId	fidget2/nodes.html#componentId,Node	proc componentId(node: Node): string		45
nim	position	fidget2/nodes.html#position,Node	proc position(node: Node): Vec2		48
nim	position=	fidget2/nodes.html#position=,Node,Vec2	proc position=(node: Node; value: Vec2)		51
nim	mat	fidget2/nodes.html#mat,Node	proc mat(node: Node): Mat3		55
nim	NodeSize	fidget2/nodes.html#NodeSize	type NodeSize		58
nim	size	fidget2/nodes.html#size,Node	proc size(node: Node): Vec2		60
nim	size=	fidget2/nodes.html#size=,Node,Vec2	proc size=(node: Node; value: Vec2)		63
nim	scale	fidget2/nodes.html#scale,Node	proc scale(node: Node): Vec2		67
nim	rotation	fidget2/nodes.html#rotation,Node	proc rotation(node: Node): float32		70
nim	flipHorizontal	fidget2/nodes.html#flipHorizontal,Node	proc flipHorizontal(node: Node): bool		73
nim	flipVertical	fidget2/nodes.html#flipVertical,Node	proc flipVertical(node: Node): bool		76
nim	fillGeometry	fidget2/nodes.html#fillGeometry,Node	proc fillGeometry(node: Node): seq[Geometry]		79
nim	strokeWeight	fidget2/nodes.html#strokeWeight,Node	proc strokeWeight(node: Node): float32		82
nim	strokeAlign	fidget2/nodes.html#strokeAlign,Node	proc strokeAlign(node: Node): StrokeAlign		85
nim	strokeGeometry	fidget2/nodes.html#strokeGeometry,Node	proc strokeGeometry(node: Node): seq[Geometry]		88
nim	cornerRadius	fidget2/nodes.html#cornerRadius,Node	proc cornerRadius(node: Node): float32		91
nim	rectangleCornerRadii	fidget2/nodes.html#rectangleCornerRadii,Node	proc rectangleCornerRadii(node: Node): array[4, float32]		94
nim	blendMode	fidget2/nodes.html#blendMode,Node	proc blendMode(node: Node): BlendMode		97
nim	fills	fidget2/nodes.html#fills,Node	proc fills(node: Node): seq[Paint]		100
nim	strokes	fidget2/nodes.html#strokes,Node	proc strokes(node: Node): seq[Paint]		103
nim	effects	fidget2/nodes.html#effects,Node	proc effects(node: Node): seq[Effect]		106
nim	children	fidget2/nodes.html#children,Node	proc children(node: Node): seq[Node]		109
nim	parent	fidget2/nodes.html#parent,Node	proc parent(node: Node): Node		112
nim	wordWrap	fidget2/nodes.html#wordWrap,Node	proc wordWrap(node: Node): bool		115
nim	wordWrap=	fidget2/nodes.html#wordWrap=,Node,bool	proc wordWrap=(node: Node; value: bool)		118
nim	scrollable	fidget2/nodes.html#scrollable,Node	proc scrollable(node: Node): bool		122
nim	scrollable=	fidget2/nodes.html#scrollable=,Node,bool	proc scrollable=(node: Node; value: bool)		125
nim	scrollPos	fidget2/nodes.html#scrollPos,Node	proc scrollPos(node: Node): Vec2		129
nim	scrollPos=	fidget2/nodes.html#scrollPos=,Node,Vec2	proc scrollPos=(node: Node; value: Vec2)		132
nim	editable	fidget2/nodes.html#editable,Node	proc editable(node: Node): bool		136
nim	editable=	fidget2/nodes.html#editable=,Node,bool	proc editable=(node: Node; value: bool)		139
nim	dirty	fidget2/nodes.html#dirty,Node	proc dirty(node: Node): bool		143
nim	dirty=	fidget2/nodes.html#dirty=,Node,bool	proc dirty=(node: Node; value: bool)		146
nim	prototypeStartNodeID	fidget2/nodes.html#prototypeStartNodeID,Node	proc prototypeStartNodeID(node: Node): string		149
nim	path	fidget2/nodes.html#path,Node	proc path(node: Node): string		152
nim	markTreeDirty	fidget2/nodes.html#markTreeDirty,Node	proc markTreeDirty(node: Node)		156
nim	makeTextDirty	fidget2/nodes.html#makeTextDirty,Node	proc makeTextDirty(node: Node)		159
nim	text	fidget2/nodes.html#text,Node	proc text(node: Node): string		162
nim	text=	fidget2/nodes.html#text=,Node,string	proc text=(node: Node; value: string)		168
nim	show	fidget2/nodes.html#show,Node	proc show(node: Node)		172
nim	hide	fidget2/nodes.html#hide,Node	proc hide(node: Node)		177
nim	show	fidget2/nodes.html#show,seq[Node]	proc show(nodes: seq[Node])		182
nim	hide	fidget2/nodes.html#hide,seq[Node]	proc hide(nodes: seq[Node])		187
nim	visible	fidget2/nodes.html#visible,Node	proc visible(node: Node): bool		192
nim	visible=	fidget2/nodes.html#visible=,Node,bool	proc visible=(node: Node; value: bool)		196
nim	opacity	fidget2/nodes.html#opacity,Node	proc opacity(node: Node): float32		202
nim	opacity=	fidget2/nodes.html#opacity=,Node,float32	proc opacity=(node: Node; value: float32)		205
nim	addChild	fidget2/nodes.html#addChild,Node,Node	proc addChild(parent, child: Node)		209
nim	removeChild	fidget2/nodes.html#removeChild,Node,Node	proc removeChild(parent: Node; child: Node)		214
nim	removeChildren	fidget2/nodes.html#removeChildren,Node,seq[Node]	proc removeChildren(parent: Node; children: seq[Node])		219
nim	remove	fidget2/nodes.html#remove,Node	proc remove(node: Node)		225
nim	remove	fidget2/nodes.html#remove,seq[Node]	proc remove(nodes: seq[Node])		229
nim	removeChildren	fidget2/nodes.html#removeChildren,Node	proc removeChildren(node: Node)		234
nim	copy	fidget2/nodes.html#copy,Node	proc copy(node: Node): Node		239
nim	newInstance	fidget2/nodes.html#newInstance,Node	proc newInstance(node: Node): Node		242
nim	isInstance	fidget2/nodes.html#isInstance,Node	proc isInstance(node: Node): bool		249
nim	masterComponent	fidget2/nodes.html#masterComponent,Node	proc masterComponent(node: Node): Node		254
nim	hasVariant	fidget2/nodes.html#hasVariant,Node,string,string	proc hasVariant(node: Node; name, value: string): bool		258
nim	getVariant	fidget2/nodes.html#getVariant,Node,string	proc getVariant(node: Node; name: string): string		262
nim	setVariant	fidget2/nodes.html#setVariant,Node,string,string	proc setVariant(node: Node; name, value: string)		266
nim	setVariant	fidget2/nodes.html#setVariant,seq[Node],string,string	proc setVariant(nodes: seq[Node]; name, value: string)		271
nim	setVariant	fidget2/nodes.html#setVariant,Node,string,bool	proc setVariant(node: Node; name: string; value: bool)		276
nim	childIndex	fidget2/nodes.html#childIndex,Node	proc childIndex(node: Node): int		283
nim	inTree	fidget2/nodes.html#inTree,Node,Node	proc inTree(node, other: Node): bool		287
nim	sendToFront	fidget2/nodes.html#sendToFront,Node	proc sendToFront(node: Node)		291
nim	sendToBack	fidget2/nodes.html#sendToBack,Node	proc sendToBack(node: Node)		297
nim	sendForward	fidget2/nodes.html#sendForward,Node	proc sendForward(node: Node)		303
nim	sendBackward	fidget2/nodes.html#sendBackward,Node	proc sendBackward(node: Node)		310
nim	dumpTree	fidget2/nodes.html#dumpTree,Node	proc dumpTree(node: Node): string		317
nim	onRenderCallback=	fidget2/nodes.html#onRenderCallback=,Node,proc(Node)	proc onRenderCallback=(node: Node; callback: proc (thisNode: Node) {.closure.})		320
nimgrp	setvariant	fidget2/nodes.html#setVariant-procs-all	proc		266
nimgrp	removechildren	fidget2/nodes.html#removeChildren-procs-all	proc		219
nimgrp	!=	fidget2/nodes.html#!=-procs-all	proc		21
nimgrp	remove	fidget2/nodes.html#remove-procs-all	proc		225
nimgrp	==	fidget2/nodes.html#==-procs-all	proc		18
nimgrp	show	fidget2/nodes.html#show-procs-all	proc		172
nimgrp	hide	fidget2/nodes.html#hide-procs-all	proc		177
